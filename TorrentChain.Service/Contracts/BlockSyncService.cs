// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockSyncService.proto

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using Google.Protobuf;
using Google.Protobuf.Collections;
using Google.Protobuf.Reflection;

namespace TorrentChain.Service.Contracts
{
    /// <summary>Holder for reflection information generated from BlockSyncService.proto</summary>
    public static partial class BlockSyncServiceReflection
    {
        #region Descriptor

        /// <summary>File descriptor for BlockSyncService.proto</summary>
        public static FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        private static FileDescriptor descriptor;

        static BlockSyncServiceReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                    "ChZCbG9ja1N5bmNTZXJ2aWNlLnByb3RvIngKClByb3RvQmxvY2sSDQoFSW5k",
                    "ZXgYASABKAMSEQoJQmxvY2tEYXRhGAIgASgMEgwKBEhhc2gYAyABKAwSFAoM",
                    "UHJldmlvdXNIYXNoGAQgASgMEhEKCVNpZ25hdHVyZRgFIAEoDBIRCglUaW1l",
                    "U3RhbXAYBiABKAMiFQoTUmVzb2x2ZUNoYWluUmVxdWVzdCI0ChFSZXNvbHZl",
                    "Q2hhaW5SZXBseRIfCgpCbG9ja2NoYWluGAEgAygLMgsuUHJvdG9CbG9jayIu",
                    "ChBTZW5kQmxvY2tSZXF1ZXN0EhoKBUJsb2NrGAEgASgLMgsuUHJvdG9CbG9j",
                    "ayIhCg5TZW5kQmxvY2tSZXBseRIPCgdTdWNjZXNzGAEgASgIMnoKCUJsb2Nr",
                    "U3luYxIxCglTZW5kQmxvY2sSES5TZW5kQmxvY2tSZXF1ZXN0Gg8uU2VuZEJs",
                    "b2NrUmVwbHkiABI6CgxSZXNvbHZlQ2hhaW4SFC5SZXNvbHZlQ2hhaW5SZXF1",
                    "ZXN0GhIuUmVzb2x2ZUNoYWluUmVwbHkiAGIGcHJvdG8z"));
            descriptor = FileDescriptor.FromGeneratedCode(descriptorData,
                new FileDescriptor[] { },
                new GeneratedClrTypeInfo(null, new GeneratedClrTypeInfo[]
                {
                    new GeneratedClrTypeInfo(typeof(global::TorrentChain.Service.Contracts.ProtoBlock),
                        global::TorrentChain.Service.Contracts.ProtoBlock.Parser,
                        new[] {"Index", "BlockData", "Hash", "PreviousHash", "Signature", "TimeStamp"}, null, null,
                        null),
                    new GeneratedClrTypeInfo(typeof(global::TorrentChain.Service.Contracts.ResolveChainRequest),
                        global::TorrentChain.Service.Contracts.ResolveChainRequest.Parser, null, null, null, null),
                    new GeneratedClrTypeInfo(typeof(global::TorrentChain.Service.Contracts.ResolveChainReply),
                        global::TorrentChain.Service.Contracts.ResolveChainReply.Parser, new[] {"Blockchain"}, null,
                        null, null),
                    new GeneratedClrTypeInfo(typeof(global::TorrentChain.Service.Contracts.SendBlockRequest),
                        global::TorrentChain.Service.Contracts.SendBlockRequest.Parser, new[] {"Block"}, null, null,
                        null),
                    new GeneratedClrTypeInfo(typeof(global::TorrentChain.Service.Contracts.SendBlockReply),
                        global::TorrentChain.Service.Contracts.SendBlockReply.Parser, new[] {"Success"}, null, null,
                        null)
                }));
        }

        #endregion
    }

    #region Messages

    public sealed partial class ProtoBlock : IMessage<ProtoBlock>
    {
        /// <summary>Field number for the "Index" field.</summary>
        public const int IndexFieldNumber = 1;

        /// <summary>Field number for the "BlockData" field.</summary>
        public const int BlockDataFieldNumber = 2;

        /// <summary>Field number for the "Hash" field.</summary>
        public const int HashFieldNumber = 3;

        /// <summary>Field number for the "PreviousHash" field.</summary>
        public const int PreviousHashFieldNumber = 4;

        /// <summary>Field number for the "Signature" field.</summary>
        public const int SignatureFieldNumber = 5;

        /// <summary>Field number for the "TimeStamp" field.</summary>
        public const int TimeStampFieldNumber = 6;

        private static readonly MessageParser<ProtoBlock> _parser =
            new MessageParser<ProtoBlock>(() => new ProtoBlock());

        private ByteString blockData_ = ByteString.Empty;
        private ByteString hash_ = ByteString.Empty;
        private long index_;
        private ByteString previousHash_ = ByteString.Empty;
        private ByteString signature_ = ByteString.Empty;
        private long timeStamp_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtoBlock()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtoBlock(ProtoBlock other) : this()
        {
            index_ = other.index_;
            blockData_ = other.blockData_;
            hash_ = other.hash_;
            previousHash_ = other.previousHash_;
            signature_ = other.signature_;
            timeStamp_ = other.timeStamp_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageParser<ProtoBlock> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageDescriptor Descriptor
        {
            get { return global::TorrentChain.Service.Contracts.BlockSyncServiceReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Index
        {
            get { return index_; }
            set { index_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ByteString BlockData
        {
            get { return blockData_; }
            set { blockData_ = ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ByteString Hash
        {
            get { return hash_; }
            set { hash_ = ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ByteString PreviousHash
        {
            get { return previousHash_; }
            set { previousHash_ = ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ByteString Signature
        {
            get { return signature_; }
            set { signature_ = ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TimeStamp
        {
            get { return timeStamp_; }
            set { timeStamp_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        MessageDescriptor IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProtoBlock Clone()
        {
            return new ProtoBlock(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ProtoBlock other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Index != other.Index) return false;
            if (BlockData != other.BlockData) return false;
            if (Hash != other.Hash) return false;
            if (PreviousHash != other.PreviousHash) return false;
            if (Signature != other.Signature) return false;
            if (TimeStamp != other.TimeStamp) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(CodedOutputStream output)
        {
            if (Index != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(Index);
            }

            if (BlockData.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(BlockData);
            }

            if (Hash.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteBytes(Hash);
            }

            if (PreviousHash.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteBytes(PreviousHash);
            }

            if (Signature.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteBytes(Signature);
            }

            if (TimeStamp != 0L)
            {
                output.WriteRawTag(48);
                output.WriteInt64(TimeStamp);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Index != 0L)
            {
                size += 1 + CodedOutputStream.ComputeInt64Size(Index);
            }

            if (BlockData.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeBytesSize(BlockData);
            }

            if (Hash.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeBytesSize(Hash);
            }

            if (PreviousHash.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeBytesSize(PreviousHash);
            }

            if (Signature.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeBytesSize(Signature);
            }

            if (TimeStamp != 0L)
            {
                size += 1 + CodedOutputStream.ComputeInt64Size(TimeStamp);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ProtoBlock other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Index != 0L)
            {
                Index = other.Index;
            }

            if (other.BlockData.Length != 0)
            {
                BlockData = other.BlockData;
            }

            if (other.Hash.Length != 0)
            {
                Hash = other.Hash;
            }

            if (other.PreviousHash.Length != 0)
            {
                PreviousHash = other.PreviousHash;
            }

            if (other.Signature.Length != 0)
            {
                Signature = other.Signature;
            }

            if (other.TimeStamp != 0L)
            {
                TimeStamp = other.TimeStamp;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Index = input.ReadInt64();
                        break;
                    }
                    case 18:
                    {
                        BlockData = input.ReadBytes();
                        break;
                    }
                    case 26:
                    {
                        Hash = input.ReadBytes();
                        break;
                    }
                    case 34:
                    {
                        PreviousHash = input.ReadBytes();
                        break;
                    }
                    case 42:
                    {
                        Signature = input.ReadBytes();
                        break;
                    }
                    case 48:
                    {
                        TimeStamp = input.ReadInt64();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ProtoBlock);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Index != 0L) hash ^= Index.GetHashCode();
            if (BlockData.Length != 0) hash ^= BlockData.GetHashCode();
            if (Hash.Length != 0) hash ^= Hash.GetHashCode();
            if (PreviousHash.Length != 0) hash ^= PreviousHash.GetHashCode();
            if (Signature.Length != 0) hash ^= Signature.GetHashCode();
            if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class ResolveChainRequest : IMessage<ResolveChainRequest>
    {
        private static readonly MessageParser<ResolveChainRequest> _parser =
            new MessageParser<ResolveChainRequest>(() => new ResolveChainRequest());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResolveChainRequest()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResolveChainRequest(ResolveChainRequest other) : this()
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageParser<ResolveChainRequest> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageDescriptor Descriptor
        {
            get { return global::TorrentChain.Service.Contracts.BlockSyncServiceReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        MessageDescriptor IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResolveChainRequest Clone()
        {
            return new ResolveChainRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResolveChainRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(CodedOutputStream output)
        {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResolveChainRequest other)
        {
            if (other == null)
            {
                return;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResolveChainRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class ResolveChainReply : IMessage<ResolveChainReply>
    {
        /// <summary>Field number for the "Blockchain" field.</summary>
        public const int BlockchainFieldNumber = 1;

        private static readonly MessageParser<ResolveChainReply> _parser =
            new MessageParser<ResolveChainReply>(() => new ResolveChainReply());

        private static readonly FieldCodec<global::TorrentChain.Service.Contracts.ProtoBlock> _repeated_blockchain_codec
            = FieldCodec.ForMessage(10, global::TorrentChain.Service.Contracts.ProtoBlock.Parser);

        private readonly RepeatedField<global::TorrentChain.Service.Contracts.ProtoBlock> blockchain_ =
            new RepeatedField<global::TorrentChain.Service.Contracts.ProtoBlock>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResolveChainReply()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResolveChainReply(ResolveChainReply other) : this()
        {
            blockchain_ = other.blockchain_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageParser<ResolveChainReply> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageDescriptor Descriptor
        {
            get { return global::TorrentChain.Service.Contracts.BlockSyncServiceReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RepeatedField<global::TorrentChain.Service.Contracts.ProtoBlock> Blockchain
        {
            get { return blockchain_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        MessageDescriptor IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ResolveChainReply Clone()
        {
            return new ResolveChainReply(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ResolveChainReply other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!blockchain_.Equals(other.blockchain_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(CodedOutputStream output)
        {
            blockchain_.WriteTo(output, _repeated_blockchain_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += blockchain_.CalculateSize(_repeated_blockchain_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ResolveChainReply other)
        {
            if (other == null)
            {
                return;
            }

            blockchain_.Add(other.blockchain_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        blockchain_.AddEntriesFrom(input, _repeated_blockchain_codec);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ResolveChainReply);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= blockchain_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class SendBlockRequest : IMessage<SendBlockRequest>
    {
        /// <summary>Field number for the "Block" field.</summary>
        public const int BlockFieldNumber = 1;

        private static readonly MessageParser<SendBlockRequest> _parser =
            new MessageParser<SendBlockRequest>(() => new SendBlockRequest());

        private global::TorrentChain.Service.Contracts.ProtoBlock block_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendBlockRequest()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendBlockRequest(SendBlockRequest other) : this()
        {
            Block = other.block_ != null ? other.Block.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageParser<SendBlockRequest> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageDescriptor Descriptor
        {
            get { return global::TorrentChain.Service.Contracts.BlockSyncServiceReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TorrentChain.Service.Contracts.ProtoBlock Block
        {
            get { return block_; }
            set { block_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        MessageDescriptor IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendBlockRequest Clone()
        {
            return new SendBlockRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SendBlockRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (!Equals(Block, other.Block)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(CodedOutputStream output)
        {
            if (block_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Block);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (block_ != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(Block);
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SendBlockRequest other)
        {
            if (other == null)
            {
                return;
            }

            if (other.block_ != null)
            {
                if (block_ == null)
                {
                    block_ = new global::TorrentChain.Service.Contracts.ProtoBlock();
                }

                Block.MergeFrom(other.Block);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        if (block_ == null)
                        {
                            block_ = new global::TorrentChain.Service.Contracts.ProtoBlock();
                        }

                        input.ReadMessage(block_);
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SendBlockRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (block_ != null) hash ^= Block.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return JsonFormatter.ToDiagnosticString(this);
        }
    }

    public sealed partial class SendBlockReply : IMessage<SendBlockReply>
    {
        /// <summary>Field number for the "Success" field.</summary>
        public const int SuccessFieldNumber = 1;

        private static readonly MessageParser<SendBlockReply> _parser =
            new MessageParser<SendBlockReply>(() => new SendBlockReply());

        private bool success_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendBlockReply()
        {
            OnConstruction();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendBlockReply(SendBlockReply other) : this()
        {
            success_ = other.success_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageParser<SendBlockReply> Parser
        {
            get { return _parser; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static MessageDescriptor Descriptor
        {
            get { return global::TorrentChain.Service.Contracts.BlockSyncServiceReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Success
        {
            get { return success_; }
            set { success_ = value; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        MessageDescriptor IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SendBlockReply Clone()
        {
            return new SendBlockReply(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SendBlockReply other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }

            if (ReferenceEquals(other, this))
            {
                return true;
            }

            if (Success != other.Success) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(CodedOutputStream output)
        {
            if (Success != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(Success);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Success != false)
            {
                size += 1 + 1;
            }

            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SendBlockReply other)
        {
            if (other == null)
            {
                return;
            }

            if (other.Success != false)
            {
                Success = other.Success;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        Success = input.ReadBool();
                        break;
                    }
                }
            }
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SendBlockReply);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Success != false) hash ^= Success.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return JsonFormatter.ToDiagnosticString(this);
        }
    }

    #endregion

    #endregion Designer generated code
}