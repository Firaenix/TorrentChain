// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BlockSyncService.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TorrentChain.Service
 {
  public static partial class BlockSync
  {
    static readonly string __ServiceName = "BlockSync";

    static readonly grpc::Marshaller<global::SendBlockRequest> __Marshaller_SendBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SendBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SendBlockReply> __Marshaller_SendBlockReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SendBlockReply.Parser.ParseFrom);

    static readonly grpc::Method<global::SendBlockRequest, global::SendBlockReply> __Method_SendBlock = new grpc::Method<global::SendBlockRequest, global::SendBlockReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendBlock",
        __Marshaller_SendBlockRequest,
        __Marshaller_SendBlockReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BlockSyncServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BlockSync</summary>
    public abstract partial class BlockSyncBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SendBlockReply> SendBlock(global::SendBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BlockSync</summary>
    public partial class BlockSyncClient : grpc::ClientBase<BlockSyncClient>
    {
      /// <summary>Creates a new client for BlockSync</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BlockSyncClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BlockSync that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BlockSyncClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BlockSyncClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BlockSyncClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SendBlockReply SendBlock(global::SendBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SendBlockReply SendBlock(global::SendBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SendBlockReply> SendBlockAsync(global::SendBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SendBlockReply> SendBlockAsync(global::SendBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendBlock, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BlockSyncClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BlockSyncClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BlockSyncBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendBlock, serviceImpl.SendBlock).Build();
    }

  }
}
#endregion
